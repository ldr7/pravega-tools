/**
 * Copyright (c) 2017 Dell Inc., or its subsidiaries. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 */

package io.pravega.tools.pravegacli.commands.admin;

import com.google.common.base.Strings;
import io.pravega.tools.pravegacli.commands.CommandArgs;
import lombok.Cleanup;
import io.pravega.tools.pravegacli.commands.Command;
import io.pravega.controller.server.rpc.auth.StrongPasswordProcessor;
import java.io.FileWriter;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.lang.ArrayIndexOutOfBoundsException;

public class PasswordFileCreatorCommand extends Command {
    static final String COMPONENT = "admin";
    public PasswordFileCreatorCommand(CommandArgs args){super(args);}
    public String toWrite;
    @Override
    public void execute() throws InvalidKeySpecException, NoSuchAlgorithmException, IOException {
        ensureArgCount(2);
        String fileName = getCommandArgs().getArgs().get(0);
        String s = getCommandArgs().getArgs().get(1);
        if (!Strings.isNullOrEmpty(s)) {
            CreatePassword(s);
            WriteToFile(fileName, toWrite);
        }
    }

    public void CreatePassword(String s) throws NoSuchAlgorithmException, InvalidKeySpecException {
        StrongPasswordProcessor passwordEncryptor = StrongPasswordProcessor.builder().build();
        String[] lists = s.split(":");
        if (lists.length == 3) {
            toWrite = lists[0] + ":" + passwordEncryptor.encryptPassword(lists[1]) + ":" + lists[2] + ";";
        }
    }
    public void WriteToFile (String fileName, String toWrite) throws IOException {
        try (FileWriter writer = new FileWriter(fileName))
        {
            writer.write(toWrite + "\n");
            writer.flush();
        }
    }

    public static CommandDescriptor descriptor() {
        return new CommandDescriptor(COMPONENT, "create-password-file", "Generates file with encrypted password using filename and user:password:acl given as argument.", new ArgDescriptor("filename", "Name of the file generated by the command"), new ArgDescriptor("user:passwword:acl", "Input according to which encrypted password is generated"));
    }
}

